C51 COMPILER V8.05a   LDCHIP                                                               05/31/2013 15:39:47 PAGE 1   


C51 COMPILER V8.05a, COMPILATION OF MODULE LDCHIP
OBJECT MODULE PLACED IN LDChip.OBJ
COMPILER INVOKED BY: D:\Keil\C51\BIN\C51.EXE LDChip.c BROWSE DEBUG OBJECTEXTEND

line level    source

   1          /************************************************************************************/
   2          //      版权所有：Copyright (c) 2005 - 2010 ICRoute INC.
   3          /************************************************************************************/
   4          
   5          #include "STC10F08XE.H"
   6          #include "LDChip.h"
   7          #include "Reg_RW.h"
   8          #include "FlashDef.h"
   9          #include "AsrItem.h"
  10          #include "SubFuncs.h"
  11          
  12          sbit RSTB=P3^3;
  13          sbit CSB=P2^6;
  14          
  15          uint32 nMp3StartPos=0;
  16          uint32 nMp3Size=0;
  17          uint32 nMp3Pos=0;
  18          uint32 nCurMp3Pos=0;
  19          uint8  idata nLD_Mode = LD_MODE_IDLE;           //      用来记录当前是在进行ASR识别还是在播放MP3
  20          uint8 bMp3Play=0;                                                       //      用来记录播放MP3的状态
  21          uint8 idata ucRegVal;
  22          uint8 idata ucHighInt;
  23          uint8 idata ucLowInt;
  24          uint8 idata ucStatus;
  25          uint8 idata ucSPVol=15; // MAX=15 MIN=0         //      Speaker喇叭输出的音量
  26          
  27          extern uint8 idata nAsrStatus;
  28          void ProcessInt0();
  29          
  30          /************************************************************************************/
  31          //      这个C文件里面包含的函数，相当于LD3320的驱动，以C语言源代码的形式提供
  32          //      开发者在没有调试通过之前，一定不要修改这里面的函数
  33          //      
  34          //      LD_ReloadMp3Data()函数由于牵涉到主控MCU向外部存储芯片读取MP3数据的操作
  35          //      所以开发者应该根据自己的实际使用的存储芯片，去修改这个函数
  36          //      但是要保证对于LD3320芯片的操作不改变
  37          //
  38          //      LD_GetResult()函数目前只简单取了第一候选结果作为识别结果
  39          //      开发者应该根据自己产品设计，决定是否要读取其他的识别候选结果
  40          /************************************************************************************/
  41          
  42          
  43          
  44          void LD_reset()
  45          {
  46   1              RSTB=1;
  47   1              delay(1);
  48   1              RSTB=0;
  49   1              delay(1);
  50   1              RSTB=1;
  51   1      
  52   1              delay(1);
  53   1              CSB=0;
  54   1              delay(1);
  55   1              CSB=1;
C51 COMPILER V8.05a   LDCHIP                                                               05/31/2013 15:39:47 PAGE 2   

  56   1              delay(1);
  57   1      }
  58          
  59          void LD_Init_Common()
  60          {
  61   1              bMp3Play = 0;
  62   1      
  63   1              LD_ReadReg(0x06);  
  64   1              LD_WriteReg(0x17, 0x35); 
  65   1              delay(10);
  66   1              LD_ReadReg(0x06);  
  67   1      
  68   1              LD_WriteReg(0x89, 0x03);  
  69   1              delay(5);
  70   1              LD_WriteReg(0xCF, 0x43);   
  71   1              delay(5);
  72   1              LD_WriteReg(0xCB, 0x02);
  73   1              
  74   1              /*PLL setting*/
  75   1              LD_WriteReg(0x11, LD_PLL_11);       
  76   1              if (nLD_Mode == LD_MODE_MP3)
  77   1              {
  78   2                      LD_WriteReg(0x1E, 0x00); 
  79   2                      LD_WriteReg(0x19, LD_PLL_MP3_19);   
  80   2                      LD_WriteReg(0x1B, LD_PLL_MP3_1B);   
  81   2                      LD_WriteReg(0x1D, LD_PLL_MP3_1D);
  82   2              }
  83   1              else
  84   1              {
  85   2                      LD_WriteReg(0x1E,0x00);
  86   2                      LD_WriteReg(0x19, LD_PLL_ASR_19); 
  87   2                      LD_WriteReg(0x1B, LD_PLL_ASR_1B);               
  88   2                  LD_WriteReg(0x1D, LD_PLL_ASR_1D);
  89   2              }
  90   1              delay(10);
  91   1              
  92   1              LD_WriteReg(0xCD, 0x04);
  93   1              LD_WriteReg(0x17, 0x4C); 
  94   1              delay(5);
  95   1              LD_WriteReg(0xB9, 0x00);
  96   1              LD_WriteReg(0xCF, 0x4F); 
  97   1              LD_WriteReg(0x6F, 0xFF); 
  98   1      }
  99          
 100          void LD_Init_MP3()
 101          {
 102   1              nLD_Mode = LD_MODE_MP3;
 103   1              LD_Init_Common();
 104   1      
 105   1              LD_WriteReg(0xBD,0x02);
 106   1              LD_WriteReg(0x17, 0x48);
 107   1              delay(10);
 108   1      
 109   1              LD_WriteReg(0x85, 0x52); 
 110   1              LD_WriteReg(0x8F, 0x00);  
 111   1              LD_WriteReg(0x81, 0x00);
 112   1              LD_WriteReg(0x83, 0x00);
 113   1              LD_WriteReg(0x8E, 0xff);
 114   1              LD_WriteReg(0x8D, 0xff);
 115   1          delay(1);
 116   1              LD_WriteReg(0x87, 0xff);
 117   1              LD_WriteReg(0x89, 0xff);
C51 COMPILER V8.05a   LDCHIP                                                               05/31/2013 15:39:47 PAGE 3   

 118   1              delay(1);
 119   1              LD_WriteReg(0x22, 0x00);    
 120   1              LD_WriteReg(0x23, 0x00);
 121   1              LD_WriteReg(0x20, 0xef);    
 122   1              LD_WriteReg(0x21, 0x07);
 123   1              LD_WriteReg(0x24, 0x77);          
 124   1          LD_WriteReg(0x25, 0x03);
 125   1          LD_WriteReg(0x26, 0xbb);    
 126   1          LD_WriteReg(0x27, 0x01); 
 127   1      }
 128                  
 129          void LD_Init_ASR()
 130          {
 131   1              nLD_Mode=LD_MODE_ASR_RUN;
 132   1              LD_Init_Common();
 133   1      
 134   1              LD_WriteReg(0xBD, 0x00);
 135   1              LD_WriteReg(0x17, 0x48);
 136   1              delay( 10 );
 137   1      
 138   1              LD_WriteReg(0x3C, 0x80);    
 139   1              LD_WriteReg(0x3E, 0x07);
 140   1              LD_WriteReg(0x38, 0xff);    
 141   1              LD_WriteReg(0x3A, 0x07);
 142   1              
 143   1              LD_WriteReg(0x40, 0);          
 144   1              LD_WriteReg(0x42, 8);
 145   1              LD_WriteReg(0x44, 0);    
 146   1              LD_WriteReg(0x46, 8); 
 147   1              delay( 1 );
 148   1      }
 149          
 150          
 151          void ProcessInt0()
 152          {
 153   1              uint8 nAsrResCount=0;
 154   1      
 155   1              EX0=0;
 156   1              
 157   1              ucRegVal = LD_ReadReg(0x2B);
 158   1              if(nLD_Mode == LD_MODE_ASR_RUN)
 159   1              {
 160   2                      // 语音识别产生的中断
 161   2                      // （有声音输入，不论识别成功或失败都有中断）
 162   2                      LD_WriteReg(0x29,0) ;
 163   2                      LD_WriteReg(0x02,0) ;
 164   2                      if((ucRegVal & 0x10) &&
 165   2                              LD_ReadReg(0xb2)==0x21 && 
 166   2                              LD_ReadReg(0xbf)==0x35)
 167   2                      {
 168   3                              nAsrResCount = LD_ReadReg(0xba);
 169   3                              if(nAsrResCount>0 && nAsrResCount<=4) 
 170   3                              {
 171   4                                      nAsrStatus=LD_ASR_FOUNDOK;
 172   4                              }
 173   3                              else
 174   3                          {
 175   4                                      nAsrStatus=LD_ASR_FOUNDZERO;
 176   4                              }       
 177   3                      }
 178   2                      else
 179   2                      {
C51 COMPILER V8.05a   LDCHIP                                                               05/31/2013 15:39:47 PAGE 4   

 180   3                              nAsrStatus=LD_ASR_FOUNDZERO;
 181   3                      }
 182   2                              
 183   2                      LD_WriteReg(0x2b, 0);
 184   2              LD_WriteReg(0x1C,0);
 185   2                      return;
 186   2              }
 187   1              
 188   1              // 声音播放产生的中断，有三种：
 189   1              // A. 声音数据已全部播放完。
 190   1              // B. 声音数据已发送完毕。
 191   1              // C. 声音数据暂时将要用完，需要放入新的数据。  
 192   1              ucHighInt = LD_ReadReg(0x29); 
 193   1              ucLowInt=LD_ReadReg(0x02); 
 194   1              LD_WriteReg(0x29,0) ;
 195   1              LD_WriteReg(0x02,0) ;
 196   1          if(LD_ReadReg(0xBA)&CAUSE_MP3_SONG_END)
 197   1          {
 198   2              // A. 声音数据已全部播放完。
 199   2      
 200   2                      LD_WriteReg(0x2B,  0);
 201   2              LD_WriteReg(0xBA, 0);   
 202   2                      LD_WriteReg(0xBC,0x0);  
 203   2                      bMp3Play=0;                                     // 声音数据全部播放完后，修改bMp3Play的变量
 204   2                      LD_WriteReg(0x08,1);
 205   2                      delay_2(5);
 206   2              LD_WriteReg(0x08,0);
 207   2                      LD_WriteReg(0x33, 0);
 208   2      
 209   2                      return ;
 210   2           }
 211   1      
 212   1               if(nMp3Pos>=nMp3Size)
 213   1              {
 214   2              // B. 声音数据已发送完毕。
 215   2      
 216   2                      LD_WriteReg(0xBC, 0x01);
 217   2                      LD_WriteReg(0x29, 0x10);
 218   2      //              bMp3Play=0;                             //      此时，只是主控MCU把所有MP3数据发送到LD3320芯片内，但是还没有把送入的数据全部播放完毕
 219   2                      EX0=1;
 220   2      
 221   2                      return; 
 222   2              }
 223   1      
 224   1              // C. 声音数据暂时将要用完，需要放入新的数据。  
 225   1      
 226   1              LD_ReloadMp3Data_2();
 227   1                      
 228   1              LD_WriteReg(0x29,ucHighInt); 
 229   1              LD_WriteReg(0x02,ucLowInt) ;
 230   1      
 231   1              delay_2(10);
 232   1              EX0=1;
 233   1      
 234   1      }
 235          
 236          
 237          
 238          
 239          void LD_play()
 240          {
 241   1              nMp3Pos=0;
C51 COMPILER V8.05a   LDCHIP                                                               05/31/2013 15:39:47 PAGE 5   

 242   1              bMp3Play=1;
 243   1      
 244   1              if (nMp3Pos >=  nMp3Size)
 245   1                      return ; 
 246   1      
 247   1              LD_ReloadMp3Data();
 248   1      
 249   1          LD_WriteReg(0xBA, 0x00);
 250   1              LD_WriteReg(0x17, 0x48);
 251   1              LD_WriteReg(0x33, 0x01);
 252   1              LD_WriteReg(0x29, 0x04);
 253   1              
 254   1              LD_WriteReg(0x02, 0x01); 
 255   1              LD_WriteReg(0x85, 0x5A);
 256   1      
 257   1              EX0=1;
 258   1      
 259   1      }
 260          
 261          void LD_AdjustMIX2SPVolume(uint8 val)
 262          {
 263   1              ucSPVol = val;
 264   1              val = ((15-val)&0x0f) << 2;
 265   1              LD_WriteReg(0x8E, val | 0xc3); 
 266   1              LD_WriteReg(0x87, 0x78); 
 267   1      }
 268          
 269          void LD_ReloadMp3Data()
 270          {
 271   1              uint32 nCurMp3Pos;
 272   1              uint8 val;
 273   1              uint8 k;
 274   1      
 275   1              nCurMp3Pos = nMp3StartPos + nMp3Pos;
 276   1              FLASH_CS=1;
 277   1              FLASH_CLK=0;
 278   1              FLASH_CS=0;
 279   1      
 280   1               IO_Send_Byte(W25P_FastReadData);   
 281   1               IO_Send_Byte(((nCurMp3Pos & 0xFFFFFF) >> 16));  
 282   1               IO_Send_Byte(((nCurMp3Pos & 0xFFFF) >> 8));
 283   1               IO_Send_Byte(nCurMp3Pos & 0xFF);
 284   1               IO_Send_Byte(0xFF);
 285   1      
 286   1              ucStatus = LD_ReadReg(0x06);
 287   1              while ( !(ucStatus&MASK_FIFO_STATUS_AFULL) && (nMp3Pos<nMp3Size) )
 288   1              {
 289   2                      val=0;
 290   2                      for(k=0;k<8;k++)
 291   2                      {
 292   3                              FLASH_CLK=0;
 293   3                              val<<=1;
 294   3                              FLASH_CLK=1;
 295   3                              val|=FLASH_DO;
 296   3                      }
 297   2                      LD_WriteReg(0x01,val);
 298   2      
 299   2                      nMp3Pos++;
 300   2      
 301   2                      ucStatus = LD_ReadReg(0x06);
 302   2              }
 303   1              
C51 COMPILER V8.05a   LDCHIP                                                               05/31/2013 15:39:47 PAGE 6   

 304   1              FLASH_CS=1;
 305   1              FLASH_CLK=0;
 306   1      
 307   1      }
 308          /*********************************************************************
 309          //为了消除编译时的 警告 *** WARNING L15: MULTIPLE CALL TO SEGMENT
 310          //把在中断函数中需要调用的函数重新复制并命名
 311          //消除警告 Warning L15，并且避免由于函数重入可能带来的隐藏Bug
 312          /*********************************************************************/
 313          
 314          void LD_ReloadMp3Data_2()
 315          {
 316   1              uint32 nCurMp3Pos;
 317   1              uint8 val;
 318   1              uint8 k;
 319   1      
 320   1              nCurMp3Pos = nMp3StartPos + nMp3Pos;
 321   1              FLASH_CS=1;
 322   1              FLASH_CLK=0;
 323   1              FLASH_CS=0;
 324   1      
 325   1               IO_Send_Byte(W25P_FastReadData);   
 326   1               IO_Send_Byte(((nCurMp3Pos & 0xFFFFFF) >> 16));  
 327   1               IO_Send_Byte(((nCurMp3Pos & 0xFFFF) >> 8));
 328   1               IO_Send_Byte(nCurMp3Pos & 0xFF);
 329   1               IO_Send_Byte(0xFF);
 330   1      
 331   1              ucStatus = LD_ReadReg(0x06);
 332   1              while ( !(ucStatus&MASK_FIFO_STATUS_AFULL) && (nMp3Pos<nMp3Size) )
 333   1              {
 334   2                      val=0;
 335   2                      for(k=0;k<8;k++)
 336   2                      {
 337   3                              FLASH_CLK=0;
 338   3                              val<<=1;
 339   3                              FLASH_CLK=1;
 340   3                              val|=FLASH_DO;
 341   3                      }
 342   2                      LD_WriteReg(0x01,val);
 343   2      
 344   2                      nMp3Pos++;
 345   2      
 346   2                      ucStatus = LD_ReadReg(0x06);
 347   2              }
 348   1              
 349   1              FLASH_CS=1;
 350   1              FLASH_CLK=0;
 351   1      
 352   1      }
 353          
 354          // Return 1: success.
 355          uint8 LD_Check_ASRBusyFlag_b2()
 356          {
 357   1              uint8 j;
 358   1              uint8 flag = 0;
 359   1              for (j=0; j<10; j++)
 360   1              {
 361   2                      if (LD_ReadReg(0xb2) == 0x21)
 362   2                      {
 363   3                              flag = 1;
 364   3                              break;
 365   3                      }
C51 COMPILER V8.05a   LDCHIP                                                               05/31/2013 15:39:47 PAGE 7   

 366   2                      delay(10);              
 367   2              }
 368   1              return flag;
 369   1      }
 370          
 371          void LD_AsrStart()
 372          {
 373   1              LD_Init_ASR();
 374   1      }
 375          
 376          // Return 1: success.
 377          uint8 LD_AsrRun()
 378          {
 379   1              SendString("LD_AsrRun().");
 380   1              SendLineEnd();
 381   1      
 382   1              LD_WriteReg(0x35, MIC_VOL);
 383   1      //      LD_WriteReg(0xB3, 0x0D);        // 用户阅读 开发手册 理解B3寄存器的调整对于灵敏度和识别距离的影响
 384   1      
 385   1      
 386   1              LD_WriteReg(0x1C, 0x09);
 387   1              LD_WriteReg(0xBD, 0x20);
 388   1              LD_WriteReg(0x08, 0x01);
 389   1              delay( 1 );
 390   1              LD_WriteReg(0x08, 0x00);
 391   1              delay( 1 );
 392   1      
 393   1              if(LD_Check_ASRBusyFlag_b2() == 0)
 394   1              {
 395   2                      return 0;
 396   2              }
 397   1      
 398   1              LD_WriteReg(0xB2, 0xff);        
 399   1              LD_WriteReg(0x37, 0x06);
 400   1              delay( 5 );
 401   1              LD_WriteReg(0x1C, 0x0b);
 402   1              LD_WriteReg(0x29, 0x10);
 403   1              
 404   1              LD_WriteReg(0xBD, 0x00);
 405   1              EX0=1;
 406   1              return 1;
 407   1      }
 408          
 409          void LD_AsrAddFixed_ByString(char * pRecogString, uint8 k)
 410          {
 411   1              uint8 nAsrAddLength;
 412   1      
 413   1              SendByteHex(k);
 414   1              SendString("    ");
 415   1              SendString(pRecogString);
 416   1              SendLineEnd();
 417   1      
 418   1              if (*pRecogString==0)
 419   1                      return;
 420   1      
 421   1              LD_WriteReg(0xc1, k );
 422   1              LD_WriteReg(0xc3, 0 );
 423   1              LD_WriteReg(0x08, 0x04);
 424   1              delay(1);
 425   1              LD_WriteReg(0x08, 0x00);
 426   1              delay(1);
 427   1      
C51 COMPILER V8.05a   LDCHIP                                                               05/31/2013 15:39:47 PAGE 8   

 428   1      
 429   1      
 430   1      
 431   1              for (nAsrAddLength=0; nAsrAddLength<50; nAsrAddLength++)
 432   1              {
 433   2                      if (pRecogString[nAsrAddLength] == 0)
 434   2                              break;
 435   2                      LD_WriteReg(0x5, pRecogString[nAsrAddLength]);
 436   2              }
 437   1              
 438   1              LD_WriteReg(0xb9, nAsrAddLength);
 439   1              LD_WriteReg(0xb2, 0xff);
 440   1              LD_WriteReg(0x37, 0x04);
 441   1      }
 442          
 443          void LD_AsrAddFixed_ByIndex(uint8 nIndex)
 444          {
 445   1              switch(nIndex)
 446   1              {
 447   2              case  0: LD_AsrAddFixed_ByString(STR_00,nIndex); break;
 448   2              case  1: LD_AsrAddFixed_ByString(STR_01,nIndex); break;
 449   2              case  2: LD_AsrAddFixed_ByString(STR_02,nIndex); break;
 450   2              case  3: LD_AsrAddFixed_ByString(STR_03,nIndex); break;
 451   2              case  4: LD_AsrAddFixed_ByString(STR_04,nIndex); break;
 452   2              case  5: LD_AsrAddFixed_ByString(STR_05,nIndex); break;
 453   2              case  6: LD_AsrAddFixed_ByString(STR_06,nIndex); break;
 454   2              case  7: LD_AsrAddFixed_ByString(STR_07,nIndex); break;
 455   2              case  8: LD_AsrAddFixed_ByString(STR_08,nIndex); break;
 456   2              case  9: LD_AsrAddFixed_ByString(STR_09,nIndex); break;
 457   2              case 10: LD_AsrAddFixed_ByString(STR_10,nIndex); break;
 458   2              case 11: LD_AsrAddFixed_ByString(STR_11,nIndex); break;
 459   2              case 12: LD_AsrAddFixed_ByString(STR_12,nIndex); break;
 460   2              case 13: LD_AsrAddFixed_ByString(STR_13,nIndex); break;
 461   2              case 14: LD_AsrAddFixed_ByString(STR_14,nIndex); break;
 462   2              case 15: LD_AsrAddFixed_ByString(STR_15,nIndex); break;
 463   2              case 16: LD_AsrAddFixed_ByString(STR_16,nIndex); break;
 464   2              case 17: LD_AsrAddFixed_ByString(STR_17,nIndex); break;
 465   2              case 18: LD_AsrAddFixed_ByString(STR_18,nIndex); break;
 466   2              case 19: LD_AsrAddFixed_ByString(STR_19,nIndex); break;
 467   2              case 20: LD_AsrAddFixed_ByString(STR_20,nIndex); break;
 468   2              case 21: LD_AsrAddFixed_ByString(STR_21,nIndex); break;
 469   2              case 22: LD_AsrAddFixed_ByString(STR_22,nIndex); break;
 470   2              case 23: LD_AsrAddFixed_ByString(STR_23,nIndex); break;
 471   2              case 24: LD_AsrAddFixed_ByString(STR_24,nIndex); break;
 472   2              case 25: LD_AsrAddFixed_ByString(STR_25,nIndex); break;
 473   2              case 26: LD_AsrAddFixed_ByString(STR_26,nIndex); break;
 474   2              case 27: LD_AsrAddFixed_ByString(STR_27,nIndex); break;
 475   2              case 28: LD_AsrAddFixed_ByString(STR_28,nIndex); break;
 476   2              case 29: LD_AsrAddFixed_ByString(STR_29,nIndex); break;
 477   2              case 30: LD_AsrAddFixed_ByString(STR_30,nIndex); break;
 478   2              case 31: LD_AsrAddFixed_ByString(STR_31,nIndex); break;
 479   2              case 32: LD_AsrAddFixed_ByString(STR_32,nIndex); break;
 480   2              case 33: LD_AsrAddFixed_ByString(STR_33,nIndex); break;
 481   2              case 34: LD_AsrAddFixed_ByString(STR_34,nIndex); break;
 482   2              case 35: LD_AsrAddFixed_ByString(STR_35,nIndex); break;
 483   2              case 36: LD_AsrAddFixed_ByString(STR_36,nIndex); break;
 484   2              case 37: LD_AsrAddFixed_ByString(STR_37,nIndex); break;
 485   2              case 38: LD_AsrAddFixed_ByString(STR_38,nIndex); break;
 486   2              case 39: LD_AsrAddFixed_ByString(STR_39,nIndex); break;
 487   2              case 40: LD_AsrAddFixed_ByString(STR_40,nIndex); break;
 488   2              case 41: LD_AsrAddFixed_ByString(STR_41,nIndex); break;
 489   2              case 42: LD_AsrAddFixed_ByString(STR_42,nIndex); break;
C51 COMPILER V8.05a   LDCHIP                                                               05/31/2013 15:39:47 PAGE 9   

 490   2              case 43: LD_AsrAddFixed_ByString(STR_43,nIndex); break;
 491   2              case 44: LD_AsrAddFixed_ByString(STR_44,nIndex); break;
 492   2              case 45: LD_AsrAddFixed_ByString(STR_45,nIndex); break;
 493   2              case 46: LD_AsrAddFixed_ByString(STR_46,nIndex); break;
 494   2              case 47: LD_AsrAddFixed_ByString(STR_47,nIndex); break;
 495   2              case 48: LD_AsrAddFixed_ByString(STR_48,nIndex); break;
 496   2              case 49: LD_AsrAddFixed_ByString(STR_49,nIndex); break;
 497   2      
 498   2              }
 499   1      
 500   1      }
 501          
 502          
 503          // Return 1: success.
 504          //      添加识别关键词语，开发者可以学习"语音识别芯片LD3320高阶秘籍.pdf"中关于垃圾词语吸收错误的用法
 505          uint8 LD_AsrAddFixed()
 506          {
 507   1              uint8 k, flag;
 508   1                      
 509   1              SendString("\nLD_AsrAddFixed().");
 510   1              SendLineEnd();
 511   1      
 512   1      
 513   1              flag = 1;
 514   1              for (k=0; k<ITEM_COUNT; k++)
 515   1              {
 516   2                              
 517   2                      if(LD_Check_ASRBusyFlag_b2() == 0)
 518   2                      {
 519   3                              flag = 0;
 520   3                              break;
 521   3                      }
 522   2                      
 523   2                      LD_AsrAddFixed_ByIndex(k);
 524   2              }
 525   1          return flag;
 526   1      }
 527          
 528          
 529          
 530          uint8 LD_GetResult()
 531          {
 532   1              uint8 res;
 533   1      
 534   1              res = LD_ReadReg(0xc5);
 535   1              SendString("ASR Result = ");
 536   1              SendByteHex(res);
 537   1              SendLineEnd();
 538   1      
 539   1              return res;
 540   1      }
 541          
 542          
 543          void PlaySound(uint8 nCode)
 544          {
 545   1              if (nCode>=ITEM_COUNT)
 546   1                      return;
 547   1      
 548   1      
 549   1              nMp3StartPos = pAsrItem[nCode].nSoundStart;
 550   1              nMp3Size = pAsrItem[nCode].nSoundSize;
 551   1      
C51 COMPILER V8.05a   LDCHIP                                                               05/31/2013 15:39:47 PAGE 10  

 552   1              SendString("PlaySound - ");
 553   1              SendByteHex(nCode);
 554   1              SendLongHex(nMp3StartPos);
 555   1              SendLongHex(nMp3Size);
 556   1              SendLineEnd();
 557   1      
 558   1              LD_Init_MP3();
 559   1              LD_AdjustMIX2SPVolume(SPEAKER_VOL);
 560   1              LD_play();
 561   1      }
 562          
 563          void Send_getbacknum(unsigned char Rnum)
 564          {
 565   1      SendString("ASR Result =");
 566   1      SendByteHex(Rnum);
 567   1      switch (Rnum)
 568   1      {
 569   2      case  9: SendString(STR_09);SendLineEnd(); break;
 570   2      case  10: SendString(STR_10);SendLineEnd(); break;
 571   2      case  11: SendString(STR_11);SendLineEnd(); break;
 572   2      case  12: SendString(STR_12);SendLineEnd(); break;
 573   2      case  13: SendString(STR_13);SendLineEnd(); break;
 574   2      }
 575   1      
 576   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   2050    ----
   CONSTANT SIZE    =     91    ----
   XDATA SIZE       =     72    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     17      24
   IDATA SIZE       =      6    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
